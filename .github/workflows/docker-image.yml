name: Docker Image CI

on:
  push:
    # tags:
    #   - '**'

jobs:
  build_wheel:
    name: Publication workflow
    runs-on: ubuntu-latest
    env:
      LOGFIRE_TOKEN: ${{ env.LOGFIRE_TOKEN }}
      LOGLEVEL: ${{ env.LOGLEVEL }}
      OPENROUTESERVICE_KEY: ${{ env.OPENROUTESERVICE_KEY }}
      POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
      ADDOK_HOST: ${{ env.ADDOK_HOST }}
      POSTGRES_DB: ${{ env.POSTGRES_DB }}
      POSTGRES_USER: ${{ env.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      API_PATH: ${{ env.API_PATH }}
      SUPABASE_URL: ${{ env.SUPABASE_URL }}
      SUPABASE_KEY: ${{ env.SUPABASE_KEY }}
      SUPABASE_TEST_USER: ${{ env.SUPABASE_TEST_USER }}
      SUPABASE_TEST_PASSWORD: ${{ env.SUPABASE_TEST_PASSWORD }}
      SUPABASE_JWT_SECRET: ${{ env.SUPABASE_JWT_SECRET }}
      SUPABASE_ADMIN_KEY: ${{ env.SUPABASE_ADMIN_KEY }}

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: douceville
          POSTGRES_USER: douceville
          POSTGRES_DB: douceville
        options: >-
          --health-cmd "pg_isready -U douceville"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --all-extras --all-groups

      - name: Run tests
        # For example, using `pytest`
        run: uv run pytest

      - name: Build wheel and install
        run: |
          python -m pip install --user --upgrade build
          python -m build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Python wheel file
          path: dist/*.whl

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ydethe/douceville-backend

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
