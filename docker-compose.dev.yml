services:
  # web:
  #   build: .
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     ors:
  #       condition: service_healthy
  #   environment:
  #     - LOGFIRE_TOKEN=$LOGFIRE_TOKEN
  #     - LOGLEVEL=$LOGLEVEL
  #     - FLASK_ADMIN_SWATCH=$FLASK_ADMIN_SWATCH
  #     - BCRYPT_ROUNDS=$BCRYPT_ROUNDS
  #     - SECRET_KEY=$SECRET_KEY
  #     - OPENROUTESERVICE_KEY=$OPENROUTESERVICE_KEY
  #     - ADMIN_EMAIL=$ADMIN_EMAIL
  #     - ADMIN_PASSWORD=$ADMIN_PASSWORD
  #     - STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY
  #     - STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY
  #     - MAIL_SERVER=$MAIL_SERVER
  #     - MAIL_PORT=$MAIL_PORT
  #     - MAIL_USE_TLS=$MAIL_USE_TLS
  #     - MAIL_USE_SSL=$MAIL_USE_SSL
  #     - MAIL_USERNAME=$MAIL_USERNAME
  #     - MAIL_PASSWORD=$MAIL_PASSWORD
  #     - MAIL_DEFAULT_SENDER=$MAIL_DEFAULT_SENDER
  #     - POSTGRES_HOST=$POSTGRES_HOST
  #     - POSTGRES_DB=$POSTGRES_DB
  #     - POSTGRES_USER=$POSTGRES_USER
  #     - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
  #     - HOST=https://$HOST
  #     - PORT=$PORT
  #     - PRICE_ID=$PRICE_ID
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.$COMPOSE_PROJECT_NAME.rule=Host(`$HOST`)"
  #     - "traefik.http.routers.$COMPOSE_PROJECT_NAME.entrypoints=websecure"
  #     - "traefik.http.routers.$COMPOSE_PROJECT_NAME.tls.certresolver=letsencrypt"
  #     - "traefik.http.services.$COMPOSE_PROJECT_NAME.loadbalancer.server.port=3566"
  #     - "homepage.group=$HOME_GROUP"
  #     - "homepage.name=$HOME_NAME"
  #     - "homepage.icon=$HOME_ICON"
  #     - "homepage.href=https://$HOST"
  #     - "homepage.description=$HOME_DESCRIPTION"

  # db:
  #   # sudo docker run -d --name tst_dv_psql -e POSTGRES_PASSWORD=douceville -e POSTGRES_USER=douceville -e POSTGRES_DB=douceville postgres
  #   image: postgis/postgis
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD-SHELL', 'pg_isready -U $POSTGRES_USER']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   environment:
  #     TZ: $TZ
  #     POSTGRES_DB: $POSTGRES_DB
  #     POSTGRES_USER: $POSTGRES_USER
  #     POSTGRES_PASSWORD: $POSTGRES_PASSWORD

  # ----------------- ORS application configuration ------------------- #
  # https://giscience.github.io/openrouteservice/run-instance/running-with-docker
  ors:
    ports:
      - "8082:8082"  # Expose the ORS API on port 8080
    #   - "9001:9001"  # Expose additional port for monitoring (optional)
    image: heigit/openrouteservice
    restart: unless-stopped
    # Run "mkdir -p ors-docker/config ors-docker/elevation_cache ors-docker/files ors-docker/graphs ors-docker/logs && sudo chown -R 1000:1000 ors-docker" before starting the container!
    user: "1000:1000"
    volumes:
      - ./ors-docker:/home/ors  # Mount the ORS application directory (for logs, graphs, elevation_cache, etc.) into its own directory
      #- ./graphs:/home/ors/graphs  # Mount graphs directory individually
      #- ./elevation_cache:/home/ors/elevation_cache  # Mount elevation cache directory individually
      #- ./config:/home/ors/config  # Mount configuration directory individually
      #- ./logs:/home/ors/logs  # Mount logs directory individually
      #- ./files:/home/ors/files  # Mount files directory individually
    environment:
      TZ: $TZ
      # https://download.geofabrik.de/europe/france-latest.osm.bz2
      # ors.engine.source_file: /home/ors/src/test/files/midi-pyrenees-latest.osm.bz2
      ors.engine.source_file: /home/ors/src/test/files/france-latest.osm.bz2
      REBUILD_GRAPHS: False  # Set to True to rebuild graphs on container start.
      CONTAINER_LOG_LEVEL: INFO  # Log level for the container. Possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL
      # If you don't want the default ors-config.yml you can specify a custom file name, that should match the file in
      # your 'config' volume mount.
      #ORS_CONFIG_LOCATION: /home/ors/config/my-ors-config.yml  # Location of your ORS configuration file in the docker container

      # ------------------ JAVA OPTS ------------------ #
      # Configure the memory settings for JAVA or pass additional opts
      # Fore more available ENV properties see Prepare CATALINA_OPTS and JAVA_OPTS
      # in https://github.com/GIScience/openrouteservice/blob/main/docker-entrypoint.sh
      XMS: 16g  # start RAM assigned to java
      XMX: 16g  # max RAM assigned to java. Rule of Thumb: <PBF-size> * <profiles> * 2
      # Example: 1.5 GB pbf size, two profiles (car and foot-walking)
      # -> 1.5 * 2 * 2 = 6. Set xmx to be AT LEAST `-Xmx6g`
      ADDITIONAL_JAVA_OPTS: ""  # further options you want to pass to the java command

      # ----------------- Properties configuration ------------------- #
      # Configure your whole container with only property ENVs.
      # These can be set alternatively or additionally to the yml configuration file.
      # Note, that any values set will override the corresponding values from the yml configuration file.
      # See the ors-config.env file for more options.
      # To have a configuration file-less container, uncomment at least the following properties.
      # The values are examples and provide the default configuration.
      #ors.engine.source_file: /home/ors/files/example-heidelberg.osm.gz
      #ors.engine.graphs_root_path: /home/ors/graphs
      #ors.engine.elevation.cache_path: /home/ors/elevation_cache
      #ors.engine.profiles.car.enabled: true
      #logging.level.org.heigit: INFO

    # ----------------- Healthcheck configuration ------------------- #
    # The healthcheck is disabled by default. Uncomment the following lines to enable it.
    # The healthcheck allows you to monitor the status of the ORS application.
    # Be careful with long graph builds, as the healthcheck will fail and show 'unhealthy' during this time.
    # This is especially useful if you run your ORS container in a production environment.
    healthcheck:
     test: wget --no-verbose --tries=1 --spider http://$COMPOSE_PROJECT_NAME-ors-1:8082/ors/v2/health || exit 1
     start_period: 1m
     interval: 10s
     timeout: 2s
     retries: 3
     disable: false
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.$COMPOSE_PROJECT_NAME.rule=Host(`$HOST`)"
      - "traefik.http.routers.$COMPOSE_PROJECT_NAME.entrypoints=websecure"
      - "traefik.http.routers.$COMPOSE_PROJECT_NAME.tls.certresolver=letsencrypt"
      - "traefik.http.services.$COMPOSE_PROJECT_NAME.loadbalancer.server.port=8082"
      - "homepage.group=$HOME_GROUP"
      - "homepage.name=$HOME_NAME"
      - "homepage.icon=$HOME_ICON"
      - "homepage.href=https://$HOST"
      - "homepage.description=$HOME_DESCRIPTION" 

networks:
  default:
    external: true
    name: $TRAEFIK_NETWORK
